
[General]
allow-object-stealing-on-deletion = true
result-dir = resultsRandom
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

[Config example5a]	
network = src.dtnsim	

# specifies the number of repetitions which will use the same configuration parameters
# it makes sense when using random number generators					
repeat = 4		

# Nodes in the Network (identifiers (EiDs) matches their index, EiD=0 is ignored)			
dtnsim.nodesNumber = 4	

# random number generator used in the faults injection process
num-rngs = 1
seed-0-mt = ${runnumber}
dtnsim.central.rng-0 = 0

# Contact plan passed to central node that will be distributed to all nodes in the network
dtnsim.central.contactsFile = ${CP="contactPlan/0.5_0"}

# faultsAware parameter specifies if contacts with faults will be deleted from contact plan and topology.
# In that case, we say that the routing algorithm (using the contact plan) is "aware" of faults.
# if faultsAware = false, the contacts with faults are only deleted from the topology but not from the contact plan.
# In this case we say that the routing algorithm is "not aware" of faults. It will queue bundles for contacts with faults
# which will not be scheduled.
dtnsim.central.faultsAware = ${faultsAware=false}

# deleteNContacts specifies how many contacts will be deleted from the original topology
# provided in dtnsim.central.contactsFile
dtnsim.central.deleteNContacts = ${deleteNContacts=0..60 step 6}

# if useCentrality = false the contacts to be deleted are chosen randomly.
# if useCentrality = true the contacts to be deleted are chosen taking into account a centrality measurement.
# That is, injection faults is directed to the more important contacts in terms of routes which pass through them.
dtnsim.central.useCentrality = false

# this enables the calculation of total available routes from all nodes to all nodes
# It is a heavy calculation used in the availableRoutes statistic which should be disabled for large topologies.
dtnsim.central.enableAvailableRoutesCalculation = true

# disabled the recording of vectorial statistics
dtnsim.node[*].**.result-recording-modes = -vector

# Routing Algorithm: direct, cgrModel350, cgrIon350, cgrModelRev17
dtnsim.node[*].dtn.routing = "cgrModel350"

# Traffic Generation
dtnsim.node[1].app.enable=true			
dtnsim.node[1].app.bundlesNumber="100,100,100"
dtnsim.node[1].app.start="0,0,0"
dtnsim.node[1].app.destinationEid="2,3,4"
dtnsim.node[1].app.size="100,100,100" 

dtnsim.node[2].app.enable=true			
dtnsim.node[2].app.bundlesNumber="100,100,100"
dtnsim.node[2].app.start="0,0,0"
dtnsim.node[2].app.destinationEid="1,3,4"
dtnsim.node[2].app.size="100,100,100" 

dtnsim.node[3].app.enable=true	
dtnsim.node[3].app.bundlesNumber="100,100,100"
dtnsim.node[3].app.start="0,0,0"
dtnsim.node[3].app.destinationEid="1,2,4"
dtnsim.node[3].app.size="100,100,100"  

dtnsim.node[4].app.enable=true	
dtnsim.node[4].app.bundlesNumber="100,100,100"
dtnsim.node[4].app.start="0,0,0"
dtnsim.node[4].app.destinationEid="1,2,3"
dtnsim.node[4].app.size="100,100,100"

[Config example5b]	
network = src.dtnsim	

# specifies the number of repetitions which will use the same configuration parameters
# it makes sense when using random number generators					
repeat = 4				

# Nodes in the Network (identifiers (EiDs) matches their index, EiD=0 is ignored)		
dtnsim.nodesNumber = 4	

# random number generator used in the faults injection process
num-rngs = 1
seed-0-mt = ${runnumber}
dtnsim.central.rng-0 = 0

# Contact plan passed to central node that will be distributed to all nodes in the network
dtnsim.central.contactsFile = ${CP="contactPlan/0.5_0"}

# faultsAware parameter specifies if contacts with faults will be deleted from contact plan and topology.
# In that case, we say that the routing algorithm (using the contact plan) is "aware" of faults.
# if faultsAware = false, the contacts with faults are only deleted from the topology but not from the contact plan.
# In this case we say that the routing algorithm is "not aware" of faults. It will queue bundles for contacts with faults
# which will not be scheduled.
dtnsim.central.faultsAware = ${faultsAware=true}

# deleteNContacts specifies how many contacts will be deleted from the original topology
# provided in dtnsim.central.contactsFile
dtnsim.central.deleteNContacts = ${deleteNContacts=0..60 step 6}

# if useCentrality = false the contacts to be deleted are chosen randomly.
# if useCentrality = true the contacts to be deleted are chosen taking into account a centrality measurement.
# That is, injection faults is directed to the more important contacts in terms of routes which pass through them.
dtnsim.central.useCentrality = false

# this enables the calculation of total available routes from all nodes to all nodes
# It is a heavy calculation used in the availableRoutes statistic which should be disabled for large topologies.
dtnsim.central.enableAvailableRoutesCalculation = true

# disabled the recording of vectorial statistics
dtnsim.node[*].**.result-recording-modes = -vector

# Routing Algorithm: direct, cgrModel350, cgrModelRev17
dtnsim.node[*].dtn.routing = "cgrModel350"

# Traffic Generation
dtnsim.node[1].app.enable=true			
dtnsim.node[1].app.bundlesNumber="100,100,100"
dtnsim.node[1].app.start="0,0,0"
dtnsim.node[1].app.destinationEid="2,3,4"
dtnsim.node[1].app.size="100,100,100" 

dtnsim.node[2].app.enable=true			
dtnsim.node[2].app.bundlesNumber="100,100,100"
dtnsim.node[2].app.start="0,0,0"
dtnsim.node[2].app.destinationEid="1,3,4"
dtnsim.node[2].app.size="100,100,100" 

dtnsim.node[3].app.enable=true	
dtnsim.node[3].app.bundlesNumber="100,100,100"
dtnsim.node[3].app.start="0,0,0"
dtnsim.node[3].app.destinationEid="1,2,4"
dtnsim.node[3].app.size="100,100,100"  

dtnsim.node[4].app.enable=true	
dtnsim.node[4].app.bundlesNumber="100,100,100"
dtnsim.node[4].app.start="0,0,0"
dtnsim.node[4].app.destinationEid="1,2,3"
dtnsim.node[4].app.size="100,100,100"










